{"version":3,"sources":["components/Splitter.js","App.js","serviceWorker.js","index.js"],"names":["Splitter","props","handleChange","e","includes","target","className","persons","state","dataset","id","value","charAt","toUpperCase","slice","setState","console","log","name","addPerson","prevState","handleSubmit","preventDefault","changeSubmit","submit","payments","ana","diogo","fabio","joao","lourenco","sanil","sofia","bind","removePerson","object","this","reduce","obj","item","Object","assign","parseFloat","debt","people","keys","mean","values","acc","curr","length","sortedPeople","sort","personA","personB","sortedValuesPaid","map","person","i","j","resultString1","resultString2","resultString","Math","min","toFixed","concatResultString","concat","result","Set","filter","n","listItems","number","style","listStyleType","key","src","alt","width","marginBottom","idx","someArray","splice","Fragment","onSubmit","onChange","disabled","onClick","val","personId","valueId","htmlFor","type","data-id","paddingLeft","splitPayments","Component","App","textAlign","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ada9e13b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Splitter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      submit: false,\r\n      value: true,\r\n      payments: {\r\n        ana: 91.55,\r\n        diogo: 12,\r\n        fabio: 0,\r\n        joao: 36.98,\r\n        lourenco: 49.44,\r\n        sanil: 0,\r\n        sofia: 0,\r\n      },\r\n      persons: [{ name: \"\", value: \"\" }],\r\n    };\r\n\r\n    // Binding\r\n    this.addPerson = this.addPerson.bind(this);\r\n    this.removePerson = this.removePerson.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.changeSubmit = this.changeSubmit.bind(this);\r\n  }\r\n\r\n  splitPayments() {\r\n    var object = this.state.persons.reduce(\r\n      (obj, item) =>\r\n        Object.assign(obj, { [item.name]: parseFloat(item.value, 10) }),\r\n      {}\r\n    );\r\n\r\n    console.log(\"object\", object);\r\n    console.log(\"object payments\", this.state.payments);\r\n\r\n    const people = Object.keys(object);\r\n    const valuesPaid = Object.values(object);\r\n    const sum = valuesPaid.reduce((acc, curr) => curr + acc);\r\n    const mean = sum / people.length;\r\n    const sortedPeople = people.sort(\r\n      (personA, personB) => object[personA] - object[personB]\r\n    );\r\n    const sortedValuesPaid = sortedPeople.map(\r\n      (person) => object[person] - mean\r\n    );\r\n\r\n    let i = 0;\r\n    let j = sortedPeople.length - 1;\r\n    let debt;\r\n    let resultString1 = [];\r\n    let resultString2 = [];\r\n    let resultString = [];\r\n\r\n    while (i < j) {\r\n      debt = Math.min(-sortedValuesPaid[i], sortedValuesPaid[j]);\r\n      sortedValuesPaid[i] += debt;\r\n      sortedValuesPaid[j] -= debt;\r\n      console.log(\r\n        `${sortedPeople[i]} owes ${sortedPeople[j]} ${debt.toFixed(2)} €`\r\n      );\r\n\r\n      resultString1[i] = `${sortedPeople[i]} owes ${\r\n        sortedPeople[j]\r\n      } ${debt.toFixed(2)} €`;\r\n      resultString2[j] = `${sortedPeople[i]} owes ${\r\n        sortedPeople[j]\r\n      } ${debt.toFixed(2)} €`;\r\n\r\n      if (sortedValuesPaid[i] === 0) {\r\n        i++;\r\n      }\r\n      if (sortedValuesPaid[j] === 0) {\r\n        j--;\r\n      }\r\n    }\r\n\r\n    var concatResultString = resultString1.concat(resultString2);\r\n    resultString = [...new Set(concatResultString)]; // concatunates arrays from both sides to cover every transaction possible\r\n    var result = resultString.filter((n) => n); // filters undefined values if they exist\r\n\r\n    console.log(\"result string\", resultString);\r\n    console.log(\"result result string\", result);\r\n\r\n    const listItems = result.sort().map((number, i) => (\r\n      <li style={{ listStyleType: \"none\" }} key={i}>\r\n        {number}\r\n      </li>\r\n    ));\r\n\r\n    return (\r\n      <div className=\"result-display\">\r\n        <img\r\n          src=\"./money-black.svg\"\r\n          alt=\"Money exchange logo\"\r\n          style={{ width: \"35px\", marginBottom: \"10px\" }}\r\n        />\r\n        {listItems}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handles change on user input\r\n   *\r\n   * @param {*} e\r\n   */\r\n  handleChange = (e) => {\r\n    if ([\"name\", \"value\"].includes(e.target.className)) {\r\n      let persons = [...this.state.persons];\r\n      persons[e.target.dataset.id][e.target.className] =\r\n        e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1);\r\n      this.setState({ persons }, () => console.log(this.state.persons));\r\n    } else {\r\n      this.setState({\r\n        [e.target.name]:\r\n          e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1),\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Adds person with button click\r\n   *\r\n   */\r\n  addPerson = (e) => {\r\n    this.setState((prevState) => ({\r\n      persons: [...prevState.persons, { name: \"\", value: \"\" }],\r\n    }));\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Removes person with button click\r\n   */\r\n  removePerson(idx) {\r\n    let someArray = this.state.persons;\r\n    someArray.splice(idx, 1);\r\n    this.setState({ person: someArray });\r\n  }\r\n\r\n  /**\r\n   * Stops our form from automatically reloading the page\r\n   *\r\n   * @param {*} e\r\n   */\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  /**\r\n   * Changes submit to true or false\r\n   */\r\n  changeSubmit = (e) => {\r\n    console.log(\"submit\", this.state.submit);\r\n    e.preventDefault();\r\n    this.setState({\r\n      submit: !this.state.submit,\r\n      value: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { persons } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"maincard\">\r\n          {/* Forms */}\r\n          <form onSubmit={this.handleSubmit} onChange={this.handleChange}>\r\n            <button\r\n              className=\"add-user-button\"\r\n              disabled={!this.state.value}\r\n              onClick={this.addPerson}\r\n            >\r\n              <span>\r\n                <img\r\n                  src=\"./add-user-button.svg\"\r\n                  alt=\"Add Person\"\r\n                  style={{ width: \"25px\" }}\r\n                />\r\n              </span>{\" \"}\r\n              <span>Add new person</span>\r\n            </button>\r\n            {persons.map((val, idx) => {\r\n              let personId = `person-${idx}`,\r\n                valueId = `value-${idx}`;\r\n              return (\r\n                <div key={idx}>\r\n                  <label htmlFor={personId}>{`Person #${idx + 1}`}</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name={personId}\r\n                    data-id={idx}\r\n                    id={personId}\r\n                    value={persons[idx].name}\r\n                    className=\"name\"\r\n                    style={{ paddingLeft: \"8px\" }}\r\n                  />\r\n                  <label htmlFor={valueId}>Value</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name={valueId}\r\n                    data-id={idx}\r\n                    id={valueId}\r\n                    value={persons[idx].value}\r\n                    className=\"value\"\r\n                    style={{ paddingLeft: \"8px\" }}\r\n                  />\r\n                  {idx > 0 && (\r\n                    <button\r\n                      className=\"remove-user-button\"\r\n                      onClick={() => this.removePerson(idx)}\r\n                    >\r\n                      Remove person\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n            <input\r\n              className=\"submit-button\"\r\n              type=\"submit\"\r\n              value=\"Submit\"\r\n              onClick={this.changeSubmit}\r\n            />\r\n          </form>\r\n\r\n          {/* Split part */}\r\n          {this.state.submit === true && this.splitPayments()}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Splitter;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Splitter from \"./components/Splitter.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{ textAlign: \"center\", padding: \"50px 0px 50px 0px\" }}>\n          <img src=\"./splitbills.png\" alt=\"Split Bills Logo\" width=\"250\" />\n        </div>\n        <Splitter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}